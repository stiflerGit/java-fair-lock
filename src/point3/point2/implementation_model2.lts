// const Nthread = 2 // number of threads 
// range Rthread = 1..Nthread
// set Threads={t[i:Rthread]}

const NthreadA = 2
range RthreadA = 1..NthreadA
set ThreadsA = {ta[RthreadA]}

const NthreadB = 1
range RthreadB = 1..NthreadB
set ThreadsB = {tb[i:RthreadB]}

const Nthread = NthreadA+NthreadB
range Rthread = 1..Nthread
set Threads = {ThreadsA,ThreadsB}

const Ncond = 6 // number of condition variables
const Imax = 16 // a maximum value of the variable state
range Rcond = 1..Ncond
range Int = 0..Imax //set of thread indentifiers
set Cond={c[j:Rcond]} //set of condition indentifiers
set SyncOps = {signal,signalAll,await,endawait}
set LockOps = {acquire,release}
set VarAlpha ={read[Int],write[Int],inc,dec}

LOCK=(acquire->release->LOCK).

COND = EMPTY,
EMPTY = (await -> WAIT[1] | {signal,signalAll}->EMPTY ),
WAIT[i:Rthread] =
    ( when (i<Nthread) await -> WAIT[i+1]
    | signal->endawait -> if(i==1)then EMPTY else WAIT[i-1]
    | signalAll->LOOP[i]),
LOOP[i:Rthread] =(endawait->if(i==1) then EMPTY else LOOP[i-1]).

AWAIT(I=1)= (c[I].await -> release -> c[I].endawait ->acquire->END).
SIGNAL(I=1)= (c[I].signal->END).
SIGNALALL(I=1) = (c[I]. signalAll->END).

INT(I=0)=VAR[I],
VAR[v:Int]=(read[v] ->VAR[v] | write[w:Int]-> VAR[w] | inc-> VAR[v+1] | dec->VAR[v-1]).
// ----------------------------------------------
CHECKANDSIGNALCONDREQUESTA = (state.read[v:Int]->
    if(v==0 || v==3 || v==4 || v==11 || v==12) then SIGNALALL(1); END
    else END).
CHECKANDSIGNALCONDGETA = (state.read[v:Int]->
    if (v==1 || v==9 || v==15 || v==16) then SIGNALALL(2);END
    else END).
CHECKANDSIGNALCONDRELEASEA = (state.read[v:Int]->
    if(v>=3 && v<=6) then SIGNALALL(3);END
    else END).
CHECKANDSIGNALCONDREQUESTB = (state.read[v:Int]->
    if (v==0 || v==3 || v==5) then SIGNALALL(4); END
    else END).
CHECKANDSIGNALCONDGETB = (state.read[v:Int]->
    if (v==2 || v==8 || v==10) then SIGNALALL(5); END
    else END).
CHECKANDSIGNALCONDRELEASEB = (state.read[v:Int]->
    if(v==11 || v==12 || v==13) then SIGNALALL(6);END
    else END).

CHECKANDWAITREQUESTA = (state.read[v:Int]->
    if(v==0) then (state.write[1]->END)
    else if(v==3) then (state.write[5]->END)
    else if(v==4) then (state.write[6]->END)
    else if(v==11) then (state.write[12]->END)
    else if(v==12) then (state.write[13]->END)
    else AWAIT(1);CHECKANDWAITREQUESTA).

CHECKANDWAITGETA = (state.read[v:Int]->
    if(v==1 || v==9 || v==15) then (state.write[3]->END)
    else if(v==16) then (state.write[5]->END)
    else AWAIT(2);CHECKANDWAITGETA).

CHECKANDWAITRELEASEA = (state.read[v:Int]->
    if(v==3) then (state.write[0]->END)
    else if(v==4) then (state.write[8]->END)
    else if(v==5) then (state.write[9]->END)
    else if(v==6) then (state.write[10]->END)
    else AWAIT(3);CHECKANDWAITRELEASEA).

CHECKANDWAITREQUESTB = (state.read[v:Int]->
    if(v==0) then (state.write[2]->END)
    else if(v==3) then (state.write[4]->END)
    else if(v==5) then (state.write[6]->END)
    else AWAIT(4);CHECKANDWAITREQUESTB).

CHECKANDWAITGETB = (state.read[v:Int]->
    if(v==2 || v==8) then (state.write[11]->END)
    else if(v==10) then (state.write[12]->END)
    else AWAIT(5);CHECKANDWAITGETB).

CHECKANDWAITRELEASEB = (state.read[v:Int]->
    if(v==11) then (state.write[0]->END)
    else if(v==12) then (state.write[15]->END)
    else if(v==13) then (state.write[16]->END)
    else AWAIT(6);CHECKANDWAITRELEASEB).

CHECKANDSIGNAL = 
    CHECKANDSIGNALCONDREQUESTA;
    CHECKANDSIGNALCONDGETA;
    CHECKANDSIGNALCONDRELEASEA;
    CHECKANDSIGNALCONDREQUESTB;
    CHECKANDSIGNALCONDGETB;
    CHECKANDSIGNALCONDRELEASEB;
    END.

REQUESTA = (requestA->acquire->WHILE1),
WHILE1 = CHECKANDWAITREQUESTA;WHILE2,
WHILE2 = CHECKANDWAITGETA;CONTINUE,
CONTINUE = CHECKANDSIGNAL;EXIT;END + {state.VarAlpha, c[Rcond].SyncOps}.

RELEASEA = (releaseA->acquire->WHILE1),
WHILE1 = CHECKANDWAITRELEASEA;CONTINUE,
CONTINUE = CHECKANDSIGNAL;EXIT;END + {state.VarAlpha, c[Rcond].SyncOps}.

REQUESTB = (requestB->acquire->WHILE1),
WHILE1 = CHECKANDWAITREQUESTB;WHILE2,
WHILE2 = CHECKANDWAITGETB;CONTINUE,
CONTINUE = CHECKANDSIGNAL;EXIT;END + {state.VarAlpha, c[Rcond].SyncOps}.

RELEASEB = (releaseB->acquire->WHILE1),
WHILE1 = CHECKANDWAITRELEASEB;CONTINUE,
CONTINUE = CHECKANDSIGNAL;EXIT;END + {state.VarAlpha, c[Rcond].SyncOps}.

USE = (use->END).
EXIT = (release->END).

THREADA = REQUESTA;USE;RELEASEA;THREADA.
THREADB = REQUESTB;USE;RELEASEB;THREADB.

||SYS=(ThreadsA:THREADA  || ThreadsB:THREADB || Threads::LOCK || Threads::state:INT(0) || Threads::SAC).
||SAC(C=Ncond) = (forall[i:1..C] c[i]:COND).
