const Nthread = 3 // number of threads that share the object
range Rthread = 1..Nthread
const Nsem = 2 // number of semaphores
range Rsem = 1..Nsem
const Imax = 16 // a maximum value of the variable state
range Int = 0..Imax
set VarAlpha ={read[Int],write[Int],inc,dec}
set Threads={t[i:Rthread]} //set of thread indentifiers
set Sem={s[j:Rsem]} //set of condition indentifiers
set SemOps = {acquire,release}

SEMAPHORE(N=0) = SEMA[N], // N initial value
SEMA[i:Int] = (release->SEMA[i+1]|when(i>0) acquire->SEMA[i-1]).

INT(I=0)=VAR[I],
VAR[v:Int]=(read[v] ->VAR[v] | write[w:Int]-> VAR[w]| inc-> VAR[v+1] | dec->VAR[v-1]).

REQUESTA = (mutex.acquire->WHILE1),
WHILE1 = (state.read[v:Int]->if(v==1 || v==2 || (v>=5 && v<=10) || (v>=13 && v<=16)) then WAIT1;WHILE1 else NEXTREQUESTA[v];WHILE2 ),
WAIT1 = (mutex.release->semReqA.acquire->mutex.acquire->END), 
NEXTREQUESTA[v:Int] = 
	( when(v==0) ->END
	| when(v==3) state.write[5]->END
	| when(v==4) state.write[6]->END
	| when(v==11) state.write[12]->END
	| when(v==12) state.write[13]->END),

WHILE2 = (state.read[v:Int]->if(v==0 || (v>=2 && v<=8) || (v>=10 && v<=14)) then WAIT2;WHILE2 else NEXTGETA[v];CONTINUE),
NEXTGETA[v:Int] = 
	( when(v==1) state.write[3]->END
	| when(v==9) state.write[3]->END
	| when(v==15) state.write[3]->END
	| when(v==16) state.write[4]->END),
CONTINUE = ()
